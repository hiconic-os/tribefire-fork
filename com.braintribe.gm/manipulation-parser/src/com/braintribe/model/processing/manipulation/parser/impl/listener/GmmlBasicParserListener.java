// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ============================================================================
package com.braintribe.model.processing.manipulation.parser.impl.listener;

import org.antlr.v4.runtime.ParserRuleContext;

import com.braintribe.model.processing.manipulation.parser.impl.autogenerated.GmmlParserListener;
import com.braintribe.utils.collection.api.IStack;
import com.braintribe.utils.collection.impl.ArrayStack;

public abstract class GmmlBasicParserListener implements GmmlParserListener {

	private final IStack<Object> stack = new ArrayStack<>();
	
	protected <T> T pop() {
		return (T) stack.pop();
	}

	protected <T> T peek() {
		return (T) stack.peek();
	}

	protected void push(Object value) {
		stack.push(value);
	}

	@SuppressWarnings("unused")
	private final  int depth = 0; // only used in commented code

	@Override
	public void enterEveryRule(ParserRuleContext ctx) {
//		depth++;
//		StringBuilder indent = new StringBuilder();
//		for (int i = 0; i < depth; i++)
//			indent.append(" ");
//		System.out.println(indent + "enter "+ ctx.getClass().getSimpleName());
	}

	@Override
	public void exitEveryRule(ParserRuleContext ctx) {
//		StringBuilder indent = new StringBuilder();
//		for (int i = 0; i < depth; i++)
//			indent.append(" ");
//		System.out.println(indent + "exit " + ctx.getClass().getSimpleName());
//		depth--;
	}

}
