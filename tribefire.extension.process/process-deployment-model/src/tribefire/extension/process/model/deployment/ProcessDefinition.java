// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ============================================================================
/**
 * 
 * Copyright by Braintribe Technologies 

 * autogenerated code 
 *
 */

package tribefire.extension.process.model.deployment;

import java.util.List;
import java.util.Set;

import com.braintribe.model.generic.annotation.SelectiveInformation;
import com.braintribe.model.generic.annotation.meta.Mandatory;
import com.braintribe.model.generic.reflection.EntityType;
import com.braintribe.model.generic.reflection.EntityTypes;
import com.braintribe.model.meta.GmEntityType;
import com.braintribe.model.meta.GmProperty;
import com.braintribe.model.meta.data.HasMetaData;
import com.braintribe.model.time.TimeSpan;

@SelectiveInformation("${name}")

public interface ProcessDefinition extends HasErrorNode, HasOverdueNode, DecoupledInteraction, HasMetaData {

	EntityType<ProcessDefinition> T = EntityTypes.T(ProcessDefinition.class);

	String maximumNumbersOfRestarts = "maximumNumbersOfRestarts";  
	String elements = "elements";
	String onTransit = "onTransit";
	String trigger = "trigger";
	String triggerType = "triggerType";
	String gracePeriod = "gracePeriod";
	String name = "name";
	
	Integer getMaximumNumbersOfRestarts();
	void setMaximumNumbersOfRestarts(Integer maximumNumbersOfRestarts);
	
	Set<ProcessElement> getElements();
	void setElements(Set<ProcessElement> elements);

	List<TransitionProcessor> getOnTransit();
	void setOnTransit(List<TransitionProcessor> onTransit);

	GmProperty getTrigger();
	void setTrigger(GmProperty trigger);
		
	/**
	 * optional : if null, declaring type of {@link #getTrigger()} is used
	 * @return - the {@link GmEntityType} to match
	 */
	GmEntityType getTriggerType();
	void setTriggerType( GmEntityType triggerType);
	
	TimeSpan getGracePeriod();
	void setGracePeriod(TimeSpan gracePeriod);
	
	@Mandatory
	String getName();
	void setName(String name);
	
	/**
	 * extract the actually used {@link GmEntityType} to match  
	 * @return - either the declaring type of the trigger prop or the given trigger type
	 */
	default GmEntityType triggerType() {
		GmEntityType tigger = getTriggerType();
		if (tigger != null) {
			return tigger;
		}
		return getTrigger().getDeclaringType();
	}
}
